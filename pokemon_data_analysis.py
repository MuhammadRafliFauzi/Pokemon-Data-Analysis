# -*- coding: utf-8 -*-
"""Pokemon Data Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yABr0r7Fs4AO91PG-xQ-iZmDZ0iAs4cL

## **Pokemon Data Analysis**

https://bit.ly/data-pokemon-dsf
"""

# Reading data from a CSV file
import pandas as pd

df = pd.read_csv("Pokemon.csv")
df

"""**Pokemon with Highest HP Value**"""

# Fungsi untuk menemukan pemilik nilai tertinggi pada suatu kolom
def nilai_tertinggi(df, kolom):
    nilai_tertinggi = df[kolom].max()
    baris_nilai_tertinggi = df.loc[df[kolom] == nilai_tertinggi]
    pemilik_nilai_tertinggi = baris_nilai_tertinggi['Name'].iloc[0]
    return nilai_tertinggi, pemilik_nilai_tertinggi

# Menemukan nilai tertinggi pada kolom 'HP'
nilai_hp, pemilik_hp= nilai_tertinggi(df, 'HP')
print("Nilai tertinggi pada kolom 'HP' dimiliki oleh:", pemilik_hp)
print("Nilainya adalah:", nilai_hp)

"""**Pokemon with Lowest HP Value**"""

# Fungsi untuk menemukan pemilik nilai terendah pada suatu kolom
def nilai_terendah(df, kolom):
    nilai_terendah = df[kolom].min()
    baris_nilai_terendah = df.loc[df[kolom] == nilai_terendah]
    pemilik_nilai_terendah = baris_nilai_terendah['Name'].iloc[0]
    return nilai_terendah, pemilik_nilai_terendah

# Menemukan nilai terendah pada kolom 'HP'
nilai_hp, pemilik_hp = nilai_terendah(df, 'HP')
print("Nilai terendah pada kolom 'HP' dimiliki oleh:", pemilik_hp)
print("Nilainya adalah:", nilai_hp)

"""**Pokemon with Highest Attack Value**"""

# Fungsi untuk menemukan pemilik nilai tertinggi pada suatu kolom
def nilai_tertinggi(df, kolom):
    nilai_tertinggi = df[kolom].max()
    baris_nilai_tertinggi = df.loc[df[kolom] == nilai_tertinggi]
    pemilik_nilai_tertinggi = baris_nilai_tertinggi['Name'].iloc[0]
    return nilai_tertinggi, pemilik_nilai_tertinggi

# Menemukan nilai tertinggi pada kolom 'Attack'
nilai_attack, pemilik_attack, = nilai_tertinggi(df, 'Attack')
print("Nilai tertinggi pada kolom 'Attack' dimiliki oleh:", pemilik_attack)
print("Nilainya adalah:", nilai_attack)

"""**Pokemon with Lowest Attack Value**"""

# Fungsi untuk menemukan pemilik nilai terendah pada suatu kolom
def nilai_terendah(df, kolom):
    nilai_terendah = df[kolom].min()
    baris_nilai_terendah = df.loc[df[kolom] == nilai_terendah]
    pemilik_nilai_terendah = baris_nilai_terendah['Name'].iloc[0]
    return nilai_terendah, pemilik_nilai_terendah

# Menemukan nilai terendah pada kolom 'Attack'
nilai_attack, pemilik_attack = nilai_terendah(df, 'Attack')
print("Nilai terendah pada kolom 'Attack' dimiliki oleh:", pemilik_attack)
print("Nilainya adalah:", nilai_attack)

"""**Pokemon with Highest Defense Value**"""

# Fungsi untuk menemukan pemilik nilai tertinggi pada suatu kolom
def nilai_tertinggi(df, kolom):
    nilai_tertinggi = df[kolom].max()
    baris_nilai_tertinggi = df.loc[df[kolom] == nilai_tertinggi]
    pemilik_nilai_tertinggi = baris_nilai_tertinggi['Name'].iloc[0]
    return nilai_tertinggi, pemilik_nilai_tertinggi

# Menemukan nilai tertinggi pada kolom 'defense'
nilai_defense, pemilik_defense = nilai_tertinggi(df, 'Defense')
print("Nilai tertinggi pada kolom 'Defense' dimiliki oleh:", pemilik_defense)
print("Nilainya adalah:", nilai_defense)

"""**Pokemon with Lowest Defense Value**"""

# Fungsi untuk menemukan pemilik nilai terendah pada suatu kolom
def nilai_terendah(df, kolom):
    nilai_terendah = df[kolom].min()
    baris_nilai_terendah = df.loc[df[kolom] == nilai_terendah]
    pemilik_nilai_terendah = baris_nilai_terendah['Name'].iloc[0]
    return nilai_terendah, pemilik_nilai_terendah

# Menemukan nilai terendah pada kolom 'defense'
nilai_defense, pemilik_defense = nilai_terendah(df, 'Defense')
print("Nilai terendah pada kolom 'Defense' dimiliki oleh:", pemilik_defense)
print("Nilainya adalah:", nilai_defense)

"""**Pokemon with Highest Speed Value**"""

# Fungsi untuk menemukan pemilik nilai tertinggi pada suatu kolom
def nilai_tertinggi(df, kolom):
    nilai_tertinggi = df[kolom].max()
    baris_nilai_tertinggi = df.loc[df[kolom] == nilai_tertinggi]
    pemilik_nilai_tertinggi = baris_nilai_tertinggi['Name'].iloc[0]
    return nilai_tertinggi, pemilik_nilai_tertinggi

# Menemukan nilai tertinggi pada kolom 'Speed'
nilai_speed, pemilik_speed = nilai_tertinggi(df, 'Speed')
print("Nilai tertinggi pada kolom 'Speed' dimiliki oleh:", pemilik_speed)
print("Nilainya adalah:", nilai_speed)

"""**Pokemon with Lowest Speed Value**"""

# Fungsi untuk menemukan pemilik nilai terendah pada suatu kolom
def nilai_terendah(df, kolom):
    nilai_terendah = df[kolom].min()
    baris_nilai_terendah = df.loc[df[kolom] == nilai_terendah]
    pemilik_nilai_terendah = baris_nilai_terendah['Name'].iloc[0]
    return nilai_terendah, pemilik_nilai_terendah

# Menemukan nilai terendah pada kolom 'Speed'
nilai_speed, pemilik_speed = nilai_terendah(df, 'Speed')
print("Nilai terendah pada kolom 'Speed' dimiliki oleh:", pemilik_speed)
print("Nilainya adalah:", nilai_speed)

"""**Number of Pokemon by Type in Column 'Type 1'**"""

# Menghitung jumlah pokemon untuk setiap tipe dalam kolom 'Type'
jumlah_pokemon_per_type = df['Type 1'].value_counts()

print("Jumlah pokemon untuk setiap tipe:")
print(jumlah_pokemon_per_type)

# Membuat grafik
plt.bar(jumlah_pokemon_per_type.index, jumlah_pokemon_per_type.values)
plt.xlabel('Tipe Pokemon')
plt.ylabel('Jumlah Pokemon')
plt.title('Jumlah Pokemon untuk Setiap Tipe Pada Kolom \'Type 1\'')
plt.xticks(rotation=45)
plt.grid(axis='y')

# Menampilkan grafik
plt.show()

"""**Number of Pokemon by Type in Column 'Type 2'**"""

# Menghitung jumlah pokemon untuk setiap tipe dalam kolom 'Type'
jumlah_pokemon_per_type = df['Type 2'].value_counts()

print("Jumlah pokemon untuk setiap tipe:")
print(jumlah_pokemon_per_type)

# Membuat grafik
plt.bar(jumlah_pokemon_per_type.index, jumlah_pokemon_per_type.values)
plt.xlabel('Tipe Pokemon')
plt.ylabel('Jumlah Pokemon')
plt.title('Jumlah Pokemon untuk Setiap Tipe Pada Kolom \'Type 2\'')
plt.xticks(rotation=45)
plt.grid(axis='y')

# Menampilkan grafik
plt.show()